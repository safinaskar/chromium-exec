#!/bin/bash

# Ещё нужно вручную протестировать, что работают chunks (т. е. ситуация, когда stdout ребёнка слишком большой)

set -e
set -o pipefail
shopt -s inherit_errexit

export LC_ALL=C

t(){
  read -r IN

  if [ "${#IN}" -ge 256 ]; then
    echo "${0##*/}: input is too big" >&2
    exit 1
  fi

  while read -r EXP; do
    if [ "${#EXP}" -ge 256 ]; then
      echo "${0##*/}: expected output is too big" >&2
      exit 1
    fi

    printf "\\x$(printf '%02x' "${#EXP}")\0\0\0%s" "$EXP"
  done > "$DIR/expected"

  printf "\\x$(printf '%02x' "${#IN}")\0\0\0%s" "$IN" | "$EXE" > "$DIR/actual"

  if ! cmp "$DIR/actual" "$DIR/expected"; then
    echo "${0##*/}: wrong answer; input: <$IN>" >&2
    echo "${0##*/}: expected:" >&2
    cat -vET "$DIR/expected" >&2
    echo "${0##*/}: actual:" >&2
    cat -vET "$DIR/actual" >&2
    echo >&2
    exit 1
  fi

  :
}

[ $# != 1 ] && echo "Usage: ${0##*/} EXE" >&2 && exit 1

EXE="$1"

DIR="$(mktemp -d /tmp/test-chromium-exec-XXXXXX)"

echo "${0##*/}: wait for \"success\"" >&2

t << "EOF"
{"request":[[],"echo",["echo","a"]]}
{"data":[97,10],"type":"stdout"}
{"code":0,"reason":"exited","type":"terminated"}
EOF

t << "EOF"
{"request":[[],"bash",["bash","-c","[ 'д' = \"$(printf '\\xd0\\xb4')\" ]"]]}
{"code":0,"reason":"exited","type":"terminated"}
EOF

t << "EOF"
{"request":[[208,180],"bash",["bash","-c","[ 'д' = \"$(cat)\" ]"]]}
{"code":0,"reason":"exited","type":"terminated"}
EOF

t << "EOF"
{"request":[[],"bash",["bash","-c","printf 'д'"]]}
{"data":[208,180],"type":"stdout"}
{"code":0,"reason":"exited","type":"terminated"}
EOF

t << "EOF"
{"request":[[],"bash",["bash","-c","exit 10"]]}
{"code":10,"reason":"exited","type":"terminated"}
EOF

t << "EOF"
{"request":[[],"bash",["foo","-c","exit 10"]]}
{"code":10,"reason":"exited","type":"terminated"}
EOF

t << "EOF"
{"request":[[],"true",["a"]]}
{"code":0,"reason":"exited","type":"terminated"}
EOF

t << "EOF"
{"request":[[],"bash",["a","-c","echo \"$0\""]]}
{"data":[97,10],"type":"stdout"}
{"code":0,"reason":"exited","type":"terminated"}
EOF

t << "EOF"
{"request":[[],"bash",["bash","-c","echo a >&2"]]}
{"data":[97,10],"type":"stderr"}
{"code":0,"reason":"exited","type":"terminated"}
EOF

t << "EOF"
{"request":[[],"bash",["bash","-c","kill -9 $$"]]}
{"reason":"signaled","signal":9,"type":"terminated"}
EOF

# Этот тест проверяет, что мы не забыли закрыть пайп от нас к ребёнку после записи туда данных (если забыли - на этом тесте будет deadlock)
t << "EOF"
{"request":[[97,10],"cat",["cat"]]}
{"data":[97,10],"type":"stdout"}
{"code":0,"reason":"exited","type":"terminated"}
EOF

echo "${0##*/}: success" >&2
